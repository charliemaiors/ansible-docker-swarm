- include: ubuntu.yml

- hosts: docker
  tasks:
    - name: enable epel-release
      become: yes
      yum:
        name: epel-release
        state: latest
      when:
        - ansible_distribution == "CentOS"
    - name: installing packages centos
      become: yes
      yum: pkg={{item}} state=latest
      with_items:
        - curl
        - python
        - git
        - python-pip
        - ansible
        - openssl
      when:
        - ansible_distribution == "CentOS"
    - name: installing packages ubuntu
      become: yes
      apt: name={{item}} state=latest
      with_items:
        - curl
        - python
        - git
        - python-pip
        - ansible
        - openssl
      when:
        - (ansible_distribution == "Ubuntu") or (ansible_distribution == "Debian")
    - name: install docker-py
      become: yes
      shell: pip install 'docker-py>=1.7.0'
      args:
        executable: /bin/bash
    - name: install docker engine
      shell: curl -sSL https://get.docker.com/ | sh
      args:
        executable: /bin/bash 
    - name: enable docker without sudo
      become: yes
      shell: usermod -aG docker "{{ ansible_env.USER }}"
      args:
        executable: /bin/bash
    - name: create docker configuration directory
      become: yes
      file: path=/etc/systemd/system/docker.service.d state=directory
    - name: create docker certificate directory
      become: yes
      file: path=/opt/docker state=directory
    - name: write server extfile
      become: yes
      shell: "echo subjectAltName = IP:{{ inventory_hostname }},IP:{{ ansible_default_ipv4.address }},IP:127.0.0.1 > /opt/docker/extfileServer.cnf"
      args:
        executable: /bin/bash
    - name: write client extfile
      become: yes
      shell: echo extendedKeyUsage = clientAuth > /opt/docker/extfileClient.cnf
      args:
        executable: /bin/bash
    - name: generate docker certificates
      become: yes
      command: chdir=/opt/docker {{ item }}
      with_items:
        - openssl genrsa -aes256 -passout pass:x -out ca-key.pem 4096
        - openssl req -new -x509 -passin pass:x -days 365 -key ca-key.pem -sha256 -out ca.pem -subj "/C=GB/ST=London/L=London/O=Global Security/OU=IT Department/CN=example.com"
        - openssl genrsa -out server-key.pem 4096
        - "openssl req -subj \"/CN={{ inventory_hostname }}\" -sha256 -new -key server-key.pem -out server.csr"
        - openssl x509 -req -days 365 -sha256 -passin pass:x -in server.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out server-cert.pem -extfile extfileServer.cnf
        - openssl genrsa -out key.pem 4096
        - openssl req -subj '/CN=client' -new -key key.pem -out client.csr
        - openssl x509 -req -days 365 -sha256 -passin pass:x -in client.csr -CA ca.pem -CAkey ca-key.pem -CAcreateserial -out cert.pem -extfile extfileClient.cnf
        - rm -v client.csr server.csr
        - chmod -v 0444 ca-key.pem key.pem server-key.pem
    - name: fetch client certificates
      become: yes
      fetch: src={{ item.src }} dest={{ item.dest }} flat=yes
      with_items:
        - { src: /opt/docker/ca.pem, dest: certs/ }
        - { src: /opt/docker/cert.pem, dest: certs/ }
        - { src: /opt/docker/key.pem, dest: certs/ }
    - name: copy configuration files
      become: yes
      copy: src={{ item.src }} dest={{ item.dest }}
      with_items:
        - { src: keys/, dest: "{{ ansible_env.HOME }}/.ssh/" }
        - { src: hosts, dest: /etc/ansible/hosts }
        - { src: worker.yml, dest: "{{ ansible_env.HOME }}/worker.yml" }
        - { src: worker-ubuntu.yml, dest: "{{ ansible_env.HOME }}/worker-ubuntu.yml" }
        - { src: docker.conf, dest: /etc/systemd/system/docker.service.d/docker.conf }
    - name: restart docker and reload conf
      become: yes
      systemd:
        name: docker
        state: restarted
        daemon-reload: yes
    - name: login on custom docker registry
      become: yes
      docker_login:
        registry_url: https://dockerdemo.ddns.net
        username: demo
        password: demo
        reauthorize: yes
    - name: initialize docker swarm
      become: yes
      shell: docker swarm init
      args:
        executable: /bin/bash
    - name: get worker join token
      become: yes
      command: docker swarm join-token worker -q
      register: join_token
    - name: insert join token in ini file
      ini_file:
        dest: "{{ ansible_env.HOME }}/worker"
        section: docker
        option: join_token
        value: "{{ join_token.stdout }}"
    - name: insert manager ip address in ini file
      ini_file:
        dest: "{{ ansible_env.HOME }}/worker"
        section: docker
        option: manager_ip
        value: "{{ ansible_default_ipv4.address }}"
